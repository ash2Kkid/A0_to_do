name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: todo-app
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Get Lambda Role ARN
      id: get-role
      run: |
        ROLE_ARN=$(aws iam get-role --role-name lambda-exec --query 'Role.Arn' --output text)
        echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT

    - name: Deploy to AWS Lambda
      run: |
        # Check if function exists
        if aws lambda get-function --function-name todo-app > /dev/null 2>&1; then
          # Update existing function
          aws lambda update-function-code \
            --function-name todo-app \
            --image-uri ${{ steps.build-image.outputs.image_uri }}
        else
          # Create new function
          aws lambda create-function \
            --function-name todo-app \
            --role ${{ steps.get-role.outputs.role_arn }} \
            --package-type Image \
            --code ImageUri=${{ steps.build-image.outputs.image_uri }} \
            --timeout 30 \
            --memory-size 128
        fi
