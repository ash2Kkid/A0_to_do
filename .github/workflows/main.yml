name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: todo-app
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Setup Lambda Execution Role
      id: setup-role
      run: |
        if ! aws iam get-role --role-name lambda-exec > /dev/null 2>&1; then
          aws iam create-role --role-name lambda-exec --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
          aws iam attach-role-policy --role-name lambda-exec --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        fi
        ROLE_ARN=$(aws iam get-role --role-name lambda-exec --query 'Role.Arn' --output text)
        echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT

    - name: Create or Update Lambda Function
      run: |
        if aws lambda get-function --function-name todo-app > /dev/null 2>&1; then
          echo "Updating existing function"
          aws lambda update-function-code \
            --function-name todo-app \
            --image-uri ${{ steps.build-image.outputs.image_uri }}
        else
          echo "Creating new function"
          aws lambda create-function \
            --function-name todo-app \
            --role ${{ steps.setup-role.outputs.role_arn }} \
            --package-type Image \
            --code ImageUri=${{ steps.build-image.outputs.image_uri }} \
            --timeout 30 \
            --memory-size 128
        fi

    - name: Get AWS Account ID
      id: account-id
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT

    - name: Setup API Gateway
      run: |
        AWS_REGION=${{ secrets.AWS_REGION }}
        ACCOUNT_ID=${{ steps.account-id.outputs.account_id }}
        API_NAME="TodoAPI"
        
        # Create or get API
        API_ID=$(aws apigateway get-rest-apis --query "items[?name=='$API_NAME'].id" --output text)
        if [ -z "$API_ID" ]; then
          API_ID=$(aws apigateway create-rest-api --name "$API_NAME" --query 'id' --output text)
          
          # Get root resource
          ROOT_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query 'items[0].id' --output text)
          
          # Create proxy resource
          PROXY_ID=$(aws apigateway create-resource \
            --rest-api-id $API_ID \
            --parent-id $ROOT_ID \
            --path-part "{proxy+}" \
            --query 'id' --output text)
          
          # Create ANY method
          aws apigateway put-method \
            --rest-api-id $API_ID \
            --resource-id $PROXY_ID \
            --http-method ANY \
            --authorization-type "NONE"
          
          # Set up integration
          aws apigateway put-integration \
            --rest-api-id $API_ID \
            --resource-id $PROXY_ID \
            --http-method ANY \
            --type AWS_PROXY \
            --integration-http-method POST \
            --uri "arn:aws:apigateway:$AWS_REGION:lambda:path/2015-03-31/functions/arn:aws:lambda:$AWS_REGION:$ACCOUNT_ID:function:todo-app/invocations"
          
          # Deploy API
          aws apigateway create-deployment \
            --rest-api-id $API_ID \
            --stage-name prod
          
          # Add permission for API Gateway
          aws lambda add-permission \
            --function-name todo-app \
            --statement-id apigateway-access \
            --action lambda:InvokeFunction \
            --principal apigateway.amazonaws.com \
            --source-arn "arn:aws:execute-api:$AWS_REGION:$ACCOUNT_ID:$API_ID/*/*/*"
        fi
        
        # Output invoke URL
        echo "API Gateway URL: https://$API_ID.execute-api.$AWS_REGION.amazonaws.com/prod"
